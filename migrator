#!/usr/bin/env php
<?php

use Arrilot\BitrixMigrations\Commands\ArchiveCommand;
use Arrilot\BitrixMigrations\Commands\MakeCommand;
use Arrilot\BitrixMigrations\Commands\InstallCommand;
use Arrilot\BitrixMigrations\Commands\MigrateCommand;
use Arrilot\BitrixMigrations\Commands\RollbackCommand;
use Arrilot\BitrixMigrations\Commands\TemplatesCommand;
use Arrilot\BitrixMigrations\Commands\StatusCommand;
use Arrilot\BitrixMigrations\Constructors\IBlock;
use Arrilot\BitrixMigrations\Migrator;
use Arrilot\BitrixMigrations\Storages\BitrixDatabaseStorage;
use Arrilot\BitrixMigrations\TemplatesCollection;
use Symfony\Component\Console\Application;
use Arrilot\BitrixMigrations\ComposerConfigFileFinder;
use Arrilot\BitrixMigrations\ComposerConfig;

define("NOT_CHECK_PERMISSIONS", true);

$autoloadFiles = [
    __DIR__ . '/../autoload.php',
    __DIR__ . '/../../autoload.php',
];
$autoloaderFound = false;

foreach ($autoloadFiles as $autoloadFile) {
    if (!file_exists($autoloadFile)) {
        continue;
    }

    require_once $autoloadFile;
    $autoloaderFound = true;
}

if (!$autoloaderFound) {
    echo 'vendor/autoload.php could not be found. Did you run `composer install`?', PHP_EOL;
    exit();
}

$composerConfigFinder = new ComposerConfigFileFinder();
$sourceDir = getcwd();

if ($sourceDir === false) {
    throw new RuntimeException('Произошла ошибка при получении рабочего каталога, возможно запрещен доступ к родительским каталогам');
}

$composerConfigFile = $composerConfigFinder->find($sourceDir);

if (is_null($composerConfigFile) || !$composerConfigFile->isFile()) {
    throw new RuntimeException('Файл не найден');
}

$composerConfig = ComposerConfig::createFromFile($composerConfigFile->getPathname());
$extra = $composerConfig->getExtra();

$_SERVER["DOCUMENT_ROOT"] = isset($extra['public-dir']) ? $composerConfigFile->getPath() . "/" . ltrim($extra['public-dir'], '/') : __DIR__;
$DOCUMENT_ROOT = $_SERVER["DOCUMENT_ROOT"];
require $_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_before.php";

CModule::IncludeModule("iblock");

$config = [
    'table' => 'migrations',
    'dir' => './migrations',
    // 'dir_archive' => 'archive', // not required. default = "archive"
    'use_transaction' => true, // not required. default = false
    'default_fields' => [
        IBlock::class => [
            'INDEX_ELEMENT' => 'N',
            'INDEX_SECTION' => 'N',
            'VERSION' => 2,
            'SITE_ID' => 's1',
        ]
    ]
];

if (!empty($extra['arrilot-bitrix-migrations'])) {
    $config = array_merge($config, $extra['arrilot-bitrix-migrations']);
}

$database = new BitrixDatabaseStorage($config['table']);
$templates = new TemplatesCollection();
$templates->registerBasicTemplates();

$migrator = new Migrator($config, $templates, $database);

$app = new Application('Migrator');
$app->add(new MakeCommand($migrator));
$app->add(new InstallCommand($config['table'], $database));
$app->add(new MigrateCommand($migrator));
$app->add(new RollbackCommand($migrator));
$app->add(new TemplatesCommand($templates));
$app->add(new StatusCommand($migrator));
$app->add(new ArchiveCommand($migrator));
$app->run();
